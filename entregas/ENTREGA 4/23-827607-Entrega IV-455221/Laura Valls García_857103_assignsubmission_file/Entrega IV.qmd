---
title: "Entrega IV"
author: "Laura Valls - DNI: 48799131-P"
format:
  html:
    theme: [style.scss]
    toc: true
    toc-location: right
    toc-title: Índice
editor: visual
---

## Instrucciones (leer antes de empezar)

-   Modifica dentro del documento `.qmd` tus datos personales (nombre y DNI) ubicados en la cabecera del archivo.

-   Asegúrate, **ANTES de seguir editando** el documento, que el archivo `.qmd` se renderiza correctamente y se genera el `.html` correspondiente en tu carpeta local de tu ordenador.

-   Los chunks (cajas de código) creados están o vacíos o incompletos, de ahí que la mayoría tengan la opción `#| eval: false`. Una vez que edites lo que consideres, debes ir cambiando cada chunck a `#| eval: true` (o quitarlo directamente) para que se ejecuten.

-   Recuerda que puedes ejecutar chunk a chunk con el botón *play* o ejecutar todos los chunk hasta uno dado (con el botón a la izquierda del anterior).

### Paquetes necesarios

Necesitaremos los siguientes paquetes (haz play en el chunk para que se carguen):

```{r paquetes}
rm(list = ls()) # Borramos variables de environment
library(glue)
library(tidyverse)
library(readxl)
library(nycflights13)
library(dplyr)
```

## Caso práctico: aviones

### Ejercicio 1

> Haciendo uso de los datasets del paquete {nycflights13}, reproduce lo más fielmente posible el siguiente gráfico

![](./fig1.jpg)

```{r}
nycflights13::flights
```

```{r}
#| eval: true
library(lubridate)

ggplot(nycflights13::flights |> 
  mutate(month_name = month(month, label = TRUE))) +
  geom_bar(aes(x = month_name, fill = month_name)) +
  theme_minimal() +
  labs(title = 'Diagrama de Barras',
       x = 'Mes', y = 'Número de vuelos',
       caption = 'Autor: Laura Valls', fill = 'month')
```

**-\>** Como en la tabla `flights` los **meses** **vienen dados de forma númerica,** he **añadido una variable** con un `mutate( )` para que además se registrara la abreviatura de cada mes en formato texto.

De esta forma, al hacer el gráfico de barras (con **geom_bar** en lugar de geom_col, ya que solo se quiere visualizar un **conteo de vuelos**) se **pueden** **utilizar las etiquetas** o abreviaturas de los meses como variable a introducir tanto en el **eje x** como en el argumento **fill** **=** (color de las barras, dependiente también de la variable `etiquetas_meses`).

### Ejercicio 2

> Repite el ejercicio anterior personalizando el tema con al menos los siguientes items:

-   Una fuente diferente a la por defecto para el título y el caption
-   Los títulos de los ejes en un color que no sea el negro por defecto
-   Leyenda abajo en horizontal

```{r}
#| eval: true

library(sysfonts)
library(showtext)
sysfonts::font_add_google(name = 'Poppins')
showtext_auto()

theme_set(theme_minimal()) 
theme_update(
  axis.title.x = element_text(family = 'Poppins', color = '#8B0000'),
  axis.title.y = element_text(family = 'Poppins', color = '#8B0000'),
  plot.caption = element_text(family = 'Poppins'),
  plot.title = element_text(family = 'Poppins'),
  legend.position = 'bottom')

ggplot(nycflights13::flights |> 
  mutate(month_name = month(month, label = TRUE))) +
  geom_bar(aes(x = month_name, fill = month_name)) +
  labs(title = 'Diagrama de Barras',
       x = 'Mes', y = 'Número de vuelos',
       caption = 'Autor: Laura Valls', fill = 'month')
```

**-\>** Para poder **modificar el estilo** por defecto **theme_minimal** , he utilizado la función `theme_update ( )` que en lugar de crear un estilo nuevo desde cero como haría `theme ( )`, **altera algunas opciones concretas** que sean especificadas pero mantiene el resto de la configuración de ese tema.

He aplicado la Fuente `Poppins` al **título, el pie de página y ambos ejes** utilizando el argumento `family =` (que, según el Help sirve para concretar el 'font family').

De la misma manera, he **modificado los colores de los títulos de los ejes** al código `#8B0000` o `red4` .

### Ejercicio 3

> Haciendo uso de los datasets del paquete {nycflights13}, reproduce lo más fielmente posible el siguiente gráfico, teniendo en cuenta que la línea vertical es la media global (sin desagregar por aerolíneas)

![](./fig2.jpg)

-\> En primer lugar realizo un cruce entre las tablas `flights` y `airlines`, que coinciden por la variable `carrier`, que contiene el **código de cada una de las aerolíneas**. Además aprovecho para calcular la `media_delay`, que calcula los minutos medios de retraso o adelanto que tiene una aerolínea en concreto.

Al utilizar `stat = 'identity'` en la capa de mapeo, se indica que el gáfico va a ser de barras y que el ancho de cada barra (cada aerolínea) es su valor de media_delay respectivamente. Utilzo **`scale_fill_viridis_c`** para agregar una escala de colores continua.

```{r}
#| eval: true

cruce <- flights |> 
  left_join(airlines, by = "carrier") |> 
  group_by(name) |> 
  summarize(media_delay = mean(arr_delay, na.rm = TRUE))


media_global_delay <- mean(flights$arr_delay, na.rm = TRUE)
#elimino na ya que si no, no se puede calcular ninguna medida estadística
```

```{r}
#| eval: true
ggplot(cruce) + 
  geom_bar(aes(x = media_delay , 
               y = reorder(name, media_delay), 
               fill = media_delay ,
               stat = 'identity')) +
  scale_fill_viridis_c(name = 'Retraso medio de llegada') +
  geom_vline(xintercept = media_global_delay, color = 'black') + #linea vertical que marca la media
  theme_minimal() +
  labs(title = 'Diagrama de barras',
       x = 'Mniutos' , y = 'Aerolíneas', caption = 'Autor : Laura Valls')
```

## Caso práctico: probabilidades

### Ejercicio 1

> Haciendo uso del dataset de probabilidades intenta replicar lo más fielmente el siguiente gráfico (realiza las transformaciones previas a los datos que consideres)

![](./fig3.jpg)

```{r}
#| eval: false
datos <-
  read_csv("https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv")
...

ggplot(resumen) +
  ...
```

### Ejercicio 2

> Repite el gráfico anterior pero ordenando las barras por la probabilidad media (de menos a más). Busca info de fct_reorder (paquete forcats para tratar cualis, incluido en tidyverse)

![](./fig4.jpg)

```{r}
#| eval: false
ggplot(resumen |> mutate(termino = fct_reorder(..., ...))) +
  ...
```

### Ejercicio 3

> Elimina los términos c("Chances Are Slight", "Improbable", "Probably Not", "Probable", "Likely", "Very Good Chance"). Tras ello, ¿cómo podríamos visualizarlo de manera continua, sin tener que resumirlo (no valen boxplots, ver ejercicio siguiente)? Realiza el gráfico o gráficos que consideres de manera que haya un por término (y mostrados juntos). Decide una paleta adecuada de colores.

```{r}
#| eval: false
```

### Ejercicio 4

> ¿Qué tipo de gráfico es? ¿Qué parte del código de un gráfico decide que algo sea un diagrama de puntos o un boxplot? Intenta replicarlo

![](./fig5.png)

```{r}
#| eval: false
...
```
