---
title: "Entrega IV"
author: "Mónica González"
format:
  html:
    theme: [style.scss]
    toc: true
    toc-location: right
    toc-title: Índice
editor: visual
---

## Instrucciones (leer antes de empezar)

-   Modifica dentro del documento `.qmd` tus datos personales (nombre y DNI) ubicados en la cabecera del archivo.

-   Asegúrate, **ANTES de seguir editando** el documento, que el archivo `.qmd` se renderiza correctamente y se genera el `.html` correspondiente en tu carpeta local de tu ordenador.

-   Los chunks (cajas de código) creados están o vacíos o incompletos, de ahí que la mayoría tengan la opción `#| eval: false`. Una vez que edites lo que consideres, debes ir cambiando cada chunck a `#| eval: true` (o quitarlo directamente) para que se ejecuten.

-   Recuerda que puedes ejecutar chunk a chunk con el botón *play* o ejecutar todos los chunk hasta uno dado (con el botón a la izquierda del anterior).

### Paquetes necesarios

Necesitaremos los siguientes paquetes (haz play en el chunk para que se carguen):

```{r paquetes}
rm(list = ls()) # Borramos variables de environment
library(glue)
library(tidyverse)
library(readxl)
library(nycflights13)
```

## Caso práctico: aviones

### Ejercicio 1

> Haciendo uso de los datasets del paquete {nycflights13}, reproduce lo más fielmente posible el siguiente gráfico

![](./fig1.jpg)

```{r}
#| eval: true

library(ggthemes)

vuelos <-
nycflights13::flights


ggplot(vuelos |>  count(month)) +
  geom_col(aes(x=month, y=n, fill = month))+
  labs(title = "Diagrama de barras",
       x = "Mes",
       y = "Número de vuelos")+
  theme_minimal()

```

### Ejercicio 2

> Repite el ejercicio anterior personalizando el tema con al menos los siguientes items:

-   Una fuente diferente a la por defecto para el título y el caption
-   Los títulos de los ejes en un color que no sea el negro por defecto
-   Leyenda abajo en horizontal

```{r}
#| eval: true
#install.packages("showtext")
#install.packages("sysfonts")
library(showtext)
library(sysfonts)


ggplot(vuelos |>  count(month)) +
  geom_col(aes(x=month, y=n, fill=month, size = ))+
  labs(title = "Diagrama de barras",
       x = "Mes",
       y = "Número de vuelos", caption = "Mónica González de Pablo")+
  theme(axis.title.x = element_text(color = "#3E6FCB", face = "bold"),
        axis.title.y = element_text(color = "#3E6FCB", face = "bold"),
        plot.title = element_text(color = "#C34539", face = "bold", size = 33),
        plot.caption = element_text(color = "#3E6FCB", face = "bold", size = 10),
        legend.position = "bottom",       # Posicionar la leyenda en la parte inferior
        legend.direction = "horizontal")



```

### Ejercicio 3

> Haciendo uso de los datasets del paquete {nycflights13}, reproduce lo más fielmente posible el siguiente gráfico, teniendo en cuenta que la línea vertical es la media global (sin desagregar por aerolíneas)

![](./fig2.jpg)

```{r}
aerolineas <-
nycflights13::airlines
aerolineas

```

```{r}
#| eval: true

cruce <- 
  aerolineas |>  #queremos COMPLETAR la tabla aerolineas con la información de vuelos
  left_join(vuelos |> select(carrier, arr_delay), by = "carrier")

cruce


media_global <- mean(cruce$arr_delay, na.rm = TRUE)  # Utiliza na.rm = TRUE para excluir valores NA

media_global



#| eval: true

cruce |> 
  drop_na(name) |> 
  group_by(name) |> 
  summarise(media_retraso = mean(arr_delay, na.rm = TRUE)) |> 
  ggplot(aes((x = name), y = media_retraso)) +
  geom_col() +
  stat_summary(fun = "media_global", size = 0.4, color = "coral") + #no aparece no se por qué
  labs(title = "Retraso Medio por Aerolínea",
       x = "Aerolínea",
       y = "Retraso Medio (minutos)") +
    coord_flip() +
  theme_minimal() 
  


```

## Caso práctico: probabilidades

### Ejercicio 1

> Haciendo uso del dataset de probabilidades intenta replicar lo más fielmente el siguiente gráfico (realiza las transformaciones previas a los datos que consideres)

![](./fig3.jpg)

```{r}
#| eval: true
datos <-
  read_csv("https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv")

datos

datos_tidy <-
  datos |> 
  pivot_longer(cols = c("Almost Certainly" :"Chances Are Slight"), names_to = "probability", values_to = "values")

datos_tidy
```

```{r}

datos_tidy_media <- datos |> 
  pivot_longer(cols = everything(), names_to = "Categoria", values_to = "Probabilidad") |> 
  group_by(Categoria) |> 
  summarise(Media = mean(Probabilidad, na.rm = TRUE))

head(datos_tidy_media)

datos_tidy_media


ggplot(datos_tidy_media, aes(x = Categoria, y = Media, fill = Categoria)) +
  geom_bar(stat = "identity") +
  labs(title = "Distribución de Medias por Categoría",
       x = NULL,
       y = "Media de Probabilidad",
       fill = "Categoría") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  

```

### Ejercicio 2

> Repite el gráfico anterior pero ordenando las barras por la probabilidad media (de menos a más). Busca info de fct_reorder (paquete forcats para tratar cualis, incluido en tidyverse)

![](./fig4.jpg)

```{r}
#| eval: true

library(forcats)

datos_tidy_media |> 
  mutate(Categoria = fct_reorder(Categoria, Media))|> 
           ggplot(aes(x = Categoria, y = Media, fill = Categoria)) +
           geom_bar(stat = "identity") +
           labs(title = "Distribución de Medias por Categoría",
                x = NULL, y = "Media de Probabilidad", fill = "Categoría") +
           theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
```

### Ejercicio 3

> Elimina los términos c("Chances Are Slight", "Improbable", "Probably Not", "Probable", "Likely", "Very Good Chance"). Tras ello, ¿cómo podríamos visualizarlo de manera continua, sin tener que resumirlo (no valen boxplots, ver ejercicio siguiente)? Realiza el gráfico o gráficos que consideres de manera que haya un por término (y mostrados juntos). Decide una paleta adecuada de colores.

Para visualizar un gráfico de forma contínua de estos datos sin tener que resumirlos, lo más adecuado sería hacer un diagrama de dispersión de puntos.

```{r}
#| eval: true

 
datos_filtrados <- 
  datos_tidy_media |> 
  filter(!Categoria %in% c("Chances Are Slight", "Improbable", "Probably Not", "Probable", "Likely", "Very Good Chance"))

ggplot(datos_filtrados, aes(x = Categoria, y = Media, color = Categoria)) +
  geom_point() +
  labs(title = "Visualización Continua de Medias por Categoría",
       x = "Categoría",
       y = "Media") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_color_brewer(palette = "Set3")

```

### Ejercicio 4

> ¿Qué tipo de gráfico es? ¿Qué parte del código de un gráfico decide que algo sea un diagrama de puntos o un boxplot? Intenta replicarlo

![](./fig5.png)

El gráfico de la imagen es un diagrama de cajas y bigotes, que se emplea para la representación de datos atípicos de un conjunto y su dispersión. El tipo de gráfico en ggplot2 se determina principalmente por la función geom que se utiliza. Cada función geom representa un tipo específico de gráfico. Por ejemplo: geom_point() representa un diagrama de puntos, mientras que para un diagrama de cajas y bigotes se usará la función geom_boxplot(). La elección de la función geom y sus parámetros determina la apariencia y el tipo de gráfico que se produce.

```{r}
#| eval: true


ggplot(datos_tidy |>
         mutate(probability = fct_reorder(probability, values)),
       aes(x = probability, y = values, fill = probability)) +
  geom_boxplot() +
  labs(title = "Boxplot de Medias por Categoría",
       x = "Categoría",
       y = "Media") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_colorblind()  #no hay colores suficientes
```
